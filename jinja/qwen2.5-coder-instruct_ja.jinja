{# qwen_template.jinja - Jinja template for Qwen 2.5 Chat Models #}
{%- set default_system_message = "あなたは優秀な日本人のソフトウェアエンジニアです。特定の言語指定がない限りは常に日本語で回答します。コード、コメント、解説も全て日本語で記述します。変数、関数、クラス、オブジェクトには詳細なコメントを記述し、他のプログラマーがミスしないよう注意点を明記します。ウェブ開発から組み込みまで幅広い知識を持ち、複雑な課題を高度な推論技術で解決します。技術的に正確、安全、効率的、かつ高可読性なコードを生成するために、以下を遵守してください。\n\n1. **FIM モード**: 簡潔さを最重視。コード補完に特化し、前後の文脈を理解して必要最小限のコードと設計意図が伝わるコメントのみを提供。冗長な説明や挨拶は不要。\n2. **チャットモード**: 詳細さと正確さを最重視。コード解説ではサンプルコードとアルゴリズムを説明。バグの危険性があれば警告と修正提案。\n\n**推論と設計**:\nユーザー指示を正確に理解し、CoT (Chain of Thought)推論でタスクを分割した上で Step by Step で各タスクについて合理的な推論を行うこと。また、ToT(Tree of Thought) による思考法を駆使し、タスクを実現するための複数の方法を検討してユーザーに紹介した上で、各案の長所と短所を比較評価した上で総合的に判断して最良案を提示すること。\nタスクについて検討を行う際には検討プロセスにミスがある可能性も考慮し、もし仮説が間違っていたら異なる結論に至ることも想定して推論を行うこと。必要であればユーザーに対してタスクを検討・処理する上での前提条件や制約条件などを問い合わせを行い、ユーザーからさらなる情報を引き出した上で正確な上に基づいた上で正しい推論を行うこと。\n\n**品質**:\nセキュリティベストプラクティスを実装。可読性を最優先し、明確な命名、一貫性、論理構成を徹底。チーム開発を考慮し、ドキュメント化とコーディング標準を遵守。\n\n**最終目標**:\n体系的、論理的、高効率、高セキュリティ、高可読性、高保守性のコードを生成し、最高のソフトウェアエンジニアリングを提供すること。" -%} {# Define default system message variable #}

{# --- System Prompt Section --- #}
{# System prompt handling based on whether tools are provided #}
{%- if tools %}
    {# --- System prompt for tool usage --- #}
    {{- '<|im_start|>system\n' }} {# Start system message #}

    {# Use provided system message if available, otherwise use default system message #}
    {%- if messages[0]['role'] == 'system' %}
        {{- messages[0]['content'] }} {# Output user-provided system message #}
    {%- else %}
        {{- default_system_message }} {# Output default system message using variable #}
    {%- endif %}

    {{- "\n\n# Tools\n\nYou may call one or more functions to assist with the user query.\n\nYou are provided with function signatures within <tools></tools> XML tags:\n<tools>" }} {# Tool introduction and XML tag start #}
    {%- for tool in tools %}
        {{- "\n" }}
        {{- tool | tojson }} {# Output each tool in JSON format #}
    {%- endfor %}
    {{- "\n</tools>\n\nFor each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:\n<tool_call>\n{\\\"name\\\": <function-name>, \\\"arguments\\\": <args-json-object>}\\n</tool_call><|im_end|>\n" }} {# Tool call instruction and XML tag end, end system message #}

{%- else %}
    {# --- System prompt without tools --- #}
    {# Use provided system message if available, otherwise use default system message #}
    {%- if messages[0]['role'] == 'system' %}
        {{- '<|im_start|>system\n' + messages[0]['content'] + '<|im_end|>\n' }} {# System message with user provided content #}
    {%- else %}
        {{- '<|im_start|>system\n' + default_system_message + '<|im_end|>\n' }} {# System message with default content using variable #}
    {%- endif %}
{%- endif %}

{# --- Message Loop Section --- #}
{# Loop through each message in the messages list #}
{%- for message in messages %}
    {# --- User/System/Assistant Message Handling (without tool_calls for assistant) --- #}
    {%- if (message.role == "user") or (message.role == "system" and not loop.first) or (message.role == "assistant" and not message.tool_calls) %}
        {{- '<|im_start|>' + message.role + '\n' + message.content + '<|im_end|>\n' }} {# Output user/system/assistant message with <|im_start|>, role, content, and <|im_end|> #}

    {# --- Assistant Message Handling with tool_calls --- #}
    {%- elif message.role == "assistant" %}
        {{- '<|im_start|>' + message.role }} {# Start assistant message #}
        {%- if message.content %}
            {{- '\n' + message.content }} {# Output assistant message content if available #}
        {%- endif %}
        {# --- Tool Call Handling within Assistant Message --- #}
        {%- for tool_call in message.tool_calls %}
            {%- if tool_call.function is defined %}
                {%- set tool_call = tool_call.function %} {# Use tool_call.function if defined (for function tool call) #}
            {%- endif %}
            {{- '\n<tool_call>\n{\"name\": \"' }} {# Start <tool_call> XML tag and JSON structure #}
            {{- tool_call.name }} {# Tool function name #}
            {{- '\", \"arguments\": ' }} {# Tool function arguments key in JSON #}
            {{- tool_call.arguments | tojson }} {# Tool function arguments (JSON encoded) #}
            {{- '}\n</tool_call>' }} {# End <tool_call> XML tag and JSON structure #}
        {%- endfor %}
        {{- '<|im_end|>\n' }} {# End assistant message #}

    {# --- Tool Message Handling --- #}
    {%- elif message.role == "tool" %}
        {# --- Start User message before tool response if it's the first tool message or previous message is not tool --- #}
        {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != "tool") %}
            {{- '<|im_start|>user' }} {# Start user message before tool response #}
        {%- endif %}
        {{- '\n<tool_response>\n' }} {# Start <tool_response> XML tag #}
        {{- message.content }} {# Tool response content #}
        {{- '\n</tool_response>' }} {# End <tool_response> XML tag #}
        {# --- End User message after tool response if it's the last message or next message is not tool --- #}
        {%- if loop.last or (messages[loop.index0 + 1].role != "tool") %}
            {{- '<|im_end|>\n' }} {# End user message after tool response #}
        {%- endif %}
    {%- endif %}
{%- endfor %}

{# --- Generation Prompt Section --- #}
{# Add generation prompt at the end if add_generation_prompt is True #}
{%- if add_generation_prompt %}
    {{- '<|im_start|>assistant\n' }} {# Start assistant generation prompt #}
{%- endif %}