{#
QwQ-32B モデルのチャットテンプレート (Jinja2形式)
このテンプレートは、ユーザーからの入力、ツール(関数)の利用、およびアシスタントの応答に基づいて、
モデルへの入力を整形します。

主な構成要素:
  - <|im_start|> : 各メッセージの開始を示す特別なトークン
  - <|im_end|>   : 各メッセージの終了を示す特別なトークン
  - system      : システムメッセージ (モデルの役割や振る舞いを定義)
  - user        : ユーザーからの入力
  - assistant   : モデル (アシスタント) からの応答
  - tool        : ツール(関数)呼び出しの結果

テンプレート内の変数:
  - messages    : チャット履歴 (メッセージオブジェクトのリスト)
  - tools       : 利用可能なツールのリスト (存在する場合)
  - add_generation_prompt : アシスタントの生成プロンプトを追加するかどうかのフラグ (通常はtrue)
#}

{#
デフォルトのシステムメッセージを定義します。
これは、コーディングに特化した詳細な指示を含むシステムプロンプトです。
#}
{% set default_system_message = "あなたは優秀な日本人のソフトウェアエンジニアです。特定の言語指定がない限りは常に日本語で回答します。コード、コメント、解説も全て日本語で記述します。変数、関数、クラス、オブジェクトには詳細なコメントを記述し、他のプログラマーがミスしないよう注意点を明記します。ウェブ開発から組み込みまで幅広い知識を持ち、複雑な課題を高度な推論技術で解決します。技術的に正確、安全、効率的、かつ高可読性なコードを生成するために、以下を遵守してください。

1. **FIM モード**: 簡潔さを最重視。コード補完に特化し、前後の文脈を理解して必要最小限のコードと設計意図が伝わるコメントのみを提供。冗長な説明や挨拶は不要。
2. **チャットモード**: 詳細さと正確さを最重視。コード解説ではサンプルコードとアルゴリズムを説明。バグの危険性があれば警告と修正提案。

**推論と設計**:
ユーザー指示を正確に理解し、CoT (Chain of Thought)推論でタスクを分割した上で Step by Step で各タスクについて合理的な推論を行うこと。また、ToT(Tree of Thought) による思考法を駆使し、タスクを実現するための複数の方法を検討してユーザーに紹介した上で、各案の長所と短所を比較評価した上で総合的に判断して最良案を提示すること。
タスクについて検討を行う際には検討プロセスにミスがある可能性も考慮し、もし仮説が間違っていたら異なる結論に至ることも想定して推論を行うこと。必要であればユーザーに対してタスクを検討・処理する上での前提条件や制約条件などを問い合わせを行い、ユーザーからさらなる情報を引き出した上で正確な上に基づいた上で正しい推論を行うこと。

**品質**:
セキュリティベストプラクティスを実装。可読性を最優先し、明確な命名、一貫性、論理構成を徹底。チーム開発を考慮し、ドキュメント化とコーディング標準を遵守。

**最終目標**:
体系的、論理的、高効率、高セキュリティ、高可読性、高保守性のコードを生成し、最高のソフトウェアエンジニアリングを提供すること。"
-%}

{%- if tools -%}
    {# ツールが利用可能な場合 #}
    <|im_start|>system
    {%- if messages[0]['role'] == 'system' -%}
        {# 最初のメッセージがシステムメッセージの場合、それをそのまま使用 #}
        {{ messages[0]['content'] }}
    {%- else -%}
        {# そうでない場合は、デフォルトのシステムメッセージは使用しない #}

    {%- endif -%}

    {# ツールに関する情報を出力 #}
# Tools

You may call one or more functions to assist with the user query.

You are provided with function signatures within <tools></tools> XML tags:
<tools>
    {%- for tool in tools -%}
        {# 各ツールについて、JSON形式でシグネチャを出力 #}
        {{ tool | tojson }}
    {%- endfor -%}
</tools>

For each function call, return a json object with function name and arguments within <tool_call></tool_call> XML tags:
<tool_call>
{"name": <function-name>, "arguments": <args-json-object>}
</tool_call><|im_end|>
{%- else -%}
    {# ツールが利用可能でない場合 #}
    {%- if messages[0]['role'] == 'system' -%}
        {# 最初のメッセージがシステムメッセージの場合 #}
        <|im_start|>system
        {{ messages[0]['content'] }}<|im_end|>
    {%- else -%}
        {# 最初のメッセージがシステムメッセージでない場合、デフォルトのシステムメッセージを使用 #}
        <|im_start|>system
        {{ default_system_message }}<|im_end|>
    {%- endif -%}
{%- endif -%}

{%- for message in messages -%}
    {# チャット履歴内の各メッセージを処理 #}
    {%- if (message.role == 'user') or (message.role == 'system' and not loop.first) -%}
        {# ユーザーメッセージ、または2番目以降のシステムメッセージ #}
        <|im_start|>{{ message.role }}
{{ message.content }}<|im_end|>
    {%- elif message.role == 'assistant' and not message.tool_calls -%}
        {# ツール呼び出しを含まないアシスタントメッセージ #}
        {%- set content = message.content.split('</think>')[-1].lstrip('\n') -%}
        <|im_start|>{{ message.role }}
{{ content }}<|im_end|>
    {%- elif message.role == 'assistant' -%}
        {# ツール呼び出しを含むアシスタントメッセージ #}
        {%- set content = message.content.split('</think>')[-1].lstrip('\n') -%}
        <|im_start|>{{ message.role }}
        {%- if message.content -%}
{{ content }}
        {%- endif -%}
        {%- for tool_call in message.tool_calls -%}
            {# 各ツール呼び出しについて、XMLタグで囲んで出力 #}
            {%- if tool_call.function is defined -%}
                {%- set tool_call = tool_call.function -%}
            {%- endif -%}

<tool_call>
{"name": "{{ tool_call.name }}", "arguments": {{ tool_call.arguments | tojson }}
</tool_call>
        {%- endfor -%}
        <|im_end|>
    {%- elif message.role == 'tool' -%}
        {# ツール(関数)からの応答メッセージ #}
        {%- if (loop.index0 == 0) or (messages[loop.index0 - 1].role != 'tool') -%}
            {# ツールメッセージが最初、または直前のメッセージがツールメッセージでない場合、ユーザーメッセージとして開始 #}
            <|im_start|>user
        {%- endif -%}

<tool_response>
{{ message.content }}
</tool_response>
        {%- if loop.last or (messages[loop.index0 + 1].role != 'tool') -%}
            {# ツールメッセージが最後、または次のメッセージがツールメッセージでない場合、終了タグを追加 #}
            <|im_end|>
        {%- endif -%}
    {%- endif -%}
{%- endfor -%}

{%- if add_generation_prompt -%}
    {# アシスタントの生成プロンプトを追加 (通常はtrue) #}
    <|im_start|>assistant
<think>
{%- endif -%}